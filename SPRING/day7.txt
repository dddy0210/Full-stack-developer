메서드 오버로딩
메서드의 매개변수만 다르면 된다.
1.매개변수의 개수가 다르던지
2.매개변수의 종류가 다르던지
3.매개변수의 개수랑 종류가 같다면 순서가 다르던지 

localhost:9090/users/signup

{
"userid":"one",
"pwd":"1234",
"name":"lee",
"email":"one@korea.com"
}

awseb-e-6qb5vyeuqm-stack-awsebrdsdatabase-qium9z8aapkk.crk0sse8oxws.ap-northeast-2.rds.amazonaws.com
엔드포인트

배포방법 
powershell ->
d:
cd 경로 입력 
./gradlew build 
./gradlew clean build (오류나면 그레들 추가 후 입력) 
bulid폴더생성 ->libs폴더->demo-snapshot 

npm run build  
mysql 
서버포인트 - 앤드포인트
유저 네임 testpm
비밀 11111111

커넥트
드라이버 다운로드 

create DATABASE todo

1. 배포하기 위한 프로그램을 만든다.
2. 프로그램을 빌드한다.
2-1 스프링부트의 경우 gradlew가 있는 폴더로 경로를 잡고 ./gradelw build를 한다.
2-2 리액트의 경우 npm run build를 한다. (설정파일과 묶어서 압축한다.)
3.eb 환경을 만든다.
3-1 백엔드 환경을 만든다.
ㄴ 빌드된 .jar 파일을 배포한다. 
3-2 프론트엔드 환경을 만든다. 
ㄴ 빌드된 압축파일을 배포한다. 

4.오류나면 로그를 확인한다.
5.코드를 수정한다.

---------------------------------
AWS(아마존 웹 서비스)
클라우드 컴퓨팅 서비스를 제공

로컬환경 : 자신의 컴퓨터나 개인서버에서 실행하고 테스트하는 환경

프로젝트를 빌드
스프링부트 ->./gradlew build ->프로젝트.jar
리액트 -> npm run build ->hrml,css,js와 같은 정적파일을 모은 build폴더 

git:버전 관리 프로그램(로컬에서 자동)
git hub:프로젝트를 저장할 수 있는 원격저장소 (인터넷이 있어야 작동)

공개키 기반 인증
비대칭 암호화를 사용하여 안전하게 통신하거나 사용자를 인증하는 방식 

비대칭 암호화
두 가지 키쌍(공개키,개인키)를 사용
하나의 키로 암호화된 데이터는 다른 키로만 복호화가 가능 

공개키 
모든 사람이 접근 할 수 있도록 공개된키
서버나 다른 사용자에게 배포하여 인증할 때 사용된다.

개인키
사용자만이 소유하는 비밀키 공개키로 암호화된 데이터를 복호화하거나
서명을 할 때 사용 

인증과정
사용자가 자신을 서버에 인증할 때 서버는 사용자의 공개키를 사용해 사용자에게 암호화된
메시지를 보낸다.
사용자는 자신의 개인키를 이용해 이 메시지를 복호화하고 그 결과를 다시 보내면
서버가 사용자의 신원을 확인 할 수있다. 

포트 포워딩
포트
네트워크 통신에서 데이터를 주고 받는 출입구와 같은 역할을 한다. 
IP주소와 포트를 조합하여 하나의 네트워크 장치에서 여러 서비스를 동시에 운영할 수 있다. 
웹서버는 80번 포트(HTTP), 22번포트(SSH서버)등 기본적으로 사용하고 있는 포트들이 있다. 

포트포워딩
외부 네트워크에서 들어오는 특정 포트로의 트래픽을 내부 네트워크의 특정 장치와
포트로 전달하는 방식이다. 

외부에서 8080번 포트로 들어오는 요청을 내부의 192.160.0.100 IP의 80번 포트로 전달하겠다. 

내부서버가 특정 포트를 열어놓으면(인바운드 규칙) 외부에서 내부서버로 접속할 수 있게 해줌

git init 해당 폴더를 git을 관리하겠다 라고 지정 

스테이지 : 임시로 저장되는 공간

git add .
로컬의 변경사항을 스테이지에 올린다. 

git commit -m "project init"
변경사항을 적용 

git branch -M main
브랜치 이름을 main으로 설정 

git remote add origin
github의 저장소와 연결

git push origin main
로컬의 변경사항을 github에 푸쉬함 

          application_name: springboot-developer
          environment_name: Springboot-developer-env

spring: #스프링부트 설정을 위한 최상위 키워드
  security: #스프링 시큐리티 설정 
    oauth2: #OAuth2 인증관련 설정
      client: #OAuth2 클라이언트 설정 
        registration: #OAuth2 클라이언트 등록 설정 
          github: # github OAuth2 클라이언트 설정(이름을 github로 정의)
            clientId: Ov23liUNaGB59INJVg8c #github OAuth2 앱의 클라이언트 id(github에서 발급받은 값)
            clientSecret: 6287aa520352a4ae0b48e8cb6fa8b3946c6b692d #github oauth2 앱의 클라이언트 시크릿
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}" #outh2 인증 후 리다이렉션 되는 URL,{baseurl}은 애플리케이션의 기본 url,{registrationID}는 클라이언트 등록 id{여기서는'github'}
            scope: #github API를 사용할 때 요청할 권한의 범위 
              - user:email #사용자의 이메일 정보를 요청하는 범위 
              - read:user #사용자의 기본 프로필 정보를 읽는 범위 
    provider: #OAuth2 제공자 설정 
      github: #github OAuth2제공자 관련 설정 
        authorization-uri: https://github.com/login/oauth/authorize
		#사용자를 github 로그인 페이지로 리다이렉션 하는 url, github oauth2 인증의 시작점 


MAP
카카오 지도를 생성하고 표시하는 컴포넌트
지도자체를 렌더링하고 마커나 인포윈도우를 배치할 수 있다. 

주요 Prop
center:{lat,lng} 형태의 객체로 지도의 중심 좌표를 지정(필수속성)
style:지도 컨테이너 css 스타일을 지정 보통 너비와 높이 지정 
onClick : 지도를 클릭했을 떄 호출되는 이벤트 핸들러
클린된 좌표를 반환 

MapInfoWindow
마커나 지도위에 정보를 표시하는 윈도우입니다

주요prop
position : 인포윈도우의 위치 좌표
removable:닫기 버튼을 활성화 할지 여부 
content:인포 윈도우에 표시할 내용 


    <Map
              center={center} //지도 중심 좌표 lat:위도, lng:경도
              style={{width:'600px', height:'600px'}}//지도의 너비와 높이
              level={3}//지도 확대 정도 숫자가 작을수록 크게, 클수록 작게보임 
              onClick={(event,MouseEvent)=>{
                const latlang = MouseEvent.latLng
                setResult(`클릭한 위치의 위도는 ${latlang.getLat()} 이고, 경도는 ${latlang.getLng()} 입니다`)
                setPosition({lat : latlang.getLat() ,lng: latlang.getLng()})




























